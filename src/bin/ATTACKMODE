#!/usr/bin/bash

if [ ! -d /sys/kernel/config/usb_gadget ]; then
        modprobe libcomposite
fi

export AM_SERIAL=no
export AM_RNDIS=no
export AM_ETHERNET=no
export AM_STORAGE=no
export AM_HID=no
export AM_HID_ATTACKFS=no

FLASHDRIVE_PD_FILE=/root/storage/udisk.img
FLASHDRIVE_ATTACKFS_FILE=/root/storage/attackfs.img
for AM in $@;
do
	case $AM in
		SERIAL)
			export AM_SERIAL=yes
		;;
		ECM_ETHERNET)
			export AM_ETHERNET=yes
		;;
		RNDIS_ETHERNET)
			export AM_RNDIS=yes
		;;
		STORAGE)
			export AM_STORAGE=yes
		;;
		HID)
			export AM_HID=yes
		;;
		HID_ATTACKFS)
			export AM_HID_ATTACKFS=yes
		;;
	esac
done

ID_VENDOR=0x1d6b
ID_PRODUCT=0x0104
BDC_DEVICE=0x0100
BDC_USB=0x200
SERIAL_NUMBER="ceffde0123488990"
MANUFACTURER="KALI_ASSISTANT"
PRODUCT="Pi Bunny"

DEV_DIR=g1
DEV_INT=1
gadgetAllDown()
{
    for g in /sys/kernel/config/usb_gadget/g*
    do
        if [ "$(cat ${g}/UDC)" != "" ]; then
        echo '' > ${g}/UDC
        fi

        [ -d ${g}/configs/c.1  ] && [ ! -d ${g}/os_desc/c.1 ] && find ${g}/configs/c.1 -maxdepth 1 -name *.usb0 -type l -exec rm -f {} +
        [ -d ${g}/configs/c.2  ] && [ ! -d ${g}/os_desc/c.2 ] && find ${g}/configs/c.2 -maxdepth 1 -name *.usb0 -type l -exec rm -f {} +

        if [ -d ${g}/os_desc/c.1 ]; then
            rm -f ${g}/os_desc/c.1
            find ${g}/configs/c.1 -maxdepth 1 -name *.usb0 -type l -exec rm -f {} +
        fi

        if [ -d ${g}/os_desc/c.2 ]; then
            rm -f ${g}/os_desc/c.2
	    find ${g}/configs/c.2 -maxdepth 1 -name *.usb0 -type l -exec rm -f {} +
        fi

        find ${g}/functions -maxdepth 1 -name *.usb0 -type d -exec rmdir {} +

        [ -d ${g}/configs/c.2/strings/0x409 ] && rmdir ${g}/configs/c.2/strings/0x409
        [ -d ${g}/configs/c.2 ] && rmdir ${g}/configs/c.2

        [ -d ${g}/configs/c.1/strings/0x409 ] && rmdir ${g}/configs/c.1/strings/0x409
        [ -d ${g}/configs/c.1 ] && rmdir ${g}/configs/c.1

        [ -d ${g}/strings/0x409 ] && rmdir ${g}/strings/0x409

        rmdir ${g}

    done
}
cd /sys/kernel/config/usb_gadget/

gadgetAllDown

while [ -d "/sys/kernel/config/usb_gadget/$DEV_DIR" ]
do
  DEV_INT=$((DEV_INT+1))
  DEV_DIR=g$DEV_INT
done


for OLDDEV in `ls /sys/kernel/config/usb_gadget/`
do
	echo "" > /sys/kernel/config/usb_gadget/$OLDDEV/UDC 2> /dev/null
done





cd /sys/kernel/config/usb_gadget/


mkdir -p $DEV_DIR
cd $DEV_DIR

#Setup USB Stuff
echo $ID_VENDOR > idVendor # Linux Foundation
echo $ID_PRODUCT > idProduct # Multifunction Composite Gadget
echo $BDC_DEVICE > bcdDevice # v1.0.0
echo $BDC_USB > bcdUSB # USB2

mkdir -p strings/0x409

echo $SERIAL_NUMBER > strings/0x409/serialnumber
echo $MANUFACTURER > strings/0x409/manufacturer
echo $PRODUCT > strings/0x409/product

N="usb0"

if [ "$AM_SERIAL" == "yes" ]
then
    C=1
    mkdir -p configs/c.$C/strings/0x409
    mkdir -p functions/acm.$N
    ln -s functions/acm.$N configs/c.$C/
fi

#C=1
#mkdir -p configs/c.$C/strings/0x409


if [ "$AM_STORAGE" == "yes" ]
then
	C=1
	mkdir -p configs/c.$C/strings/0x409

	mkdir -p ${FLASHDRIVE_PD_FILE/img/d}
	mount -o loop,ro -t vfat $FLASHDRIVE_PD_FILE ${FLASHDRIVE_PD_FILE/img/d}
	mkdir -p functions/mass_storage.$N
	echo 1 > functions/mass_storage.$N/stall
	echo 0 > functions/mass_storage.$N/lun.0/cdrom
	echo 0 > functions/mass_storage.$N/lun.0/ro
	echo 0 > functions/mass_storage.$N/lun.0/nofua
	echo $FLASHDRIVE_PD_FILE > functions/mass_storage.$N/lun.0/file
	ln -s functions/mass_storage.$N configs/c.$C/
fi

if [ "$AM_RNDIS" == "yes" ]
then
    C=1
    mkdir -p configs/c.$C/strings/0x409

    ms_vendor_code="0xcd" # Microsoft
    ms_qw_sign="MSFT100" # also Microsoft (if you couldn't tell)
    ms_compat_id="RNDIS" # matches Windows RNDIS Drivers
    ms_subcompat_id="5162001" # matches Windows RNDIS 6.0 Driver
    echo "RNDIS" > configs/c.$C/strings/0x409/configuration
    echo "1" > os_desc/use
    echo "${ms_vendor_code}" > os_desc/b_vendor_code
    echo "${ms_qw_sign}" > os_desc/qw_sign
    mkdir -p functions/rndis.$N
    HOST="48:6f:73:74:50:43"
    SELF="42:61:64:55:53:42"
    echo $HOST > functions/rndis.$N/host_addr
    echo $SELF > functions/rndis.$N/dev_addr
    echo "${ms_compat_id}" > functions/rndis.$N/os_desc/interface.rndis/compatible_id
    echo "${ms_subcompat_id}" > functions/rndis.$N/os_desc/interface.rndis/sub_compatible_id
    ln -s functions/rndis.$N configs/c.$C
    ln -s configs/c.$C os_desc
fi

if [ "$AM_ETHERNET" == "yes" ]
then
    C=1
    mkdir -p configs/c.$C/strings/0x409

    mkdir -p functions/ecm.$N
    HOST="48:6f:73:74:50:43" # "HostPC"
    SELF="42:61:64:55:53:42" # "BadUSB"
    echo $HOST > functions/ecm.$N/host_addr
    echo $SELF > functions/ecm.$N/dev_addr
    echo "Config $C: ECM network" > configs/c.$C/strings/0x409/configuration
    ln -s functions/ecm.$N configs/c.$C/
fi

if [ "$AM_HID" == "yes" ]
then
    C=1
    mkdir -p configs/c.$C/strings/0x409

    KEYBOARD_FUNCTIONS_DIR=functions/hid.keyboard.$N
    mkdir -p "$KEYBOARD_FUNCTIONS_DIR"
    echo 1 > "${KEYBOARD_FUNCTIONS_DIR}/protocol" # Keyboard
    echo 1 > "${KEYBOARD_FUNCTIONS_DIR}/subclass" # Boot interface subclass
    echo 8 > "${KEYBOARD_FUNCTIONS_DIR}/report_length"
    # Write the report descriptor
    D=$(mktemp)

    {
	echo -ne \\x05\\x01\\x09\\x06\\xA1\\x01\\x05\\x08\\x19\\x01\\x29\\x03\\x15\\x00\\x25\\x01\\x75\\x01\\x95\\x03\\x91\\x02\\x09\\x4B\\x95\\x01\\x91\\x02\\x95\\x04\\x91\\x01\\x05\\x07\\x19\\xE0\\x29\\xE7\\x95\\x08\\x81\\x02\\x75\\x08\\x95\\x01\\x81\\x01\\x19\\x00\\x29\\x91\\x26\\xFF\\x00\\x95\\x06\\x81\\x00\\xC0
    } >> "$D"
    cp "$D" "${KEYBOARD_FUNCTIONS_DIR}/report_desc"

    # Mouse Relative
    MOUSE_RELATIVE_FUNCTIONS_DIR=functions/hid.mouse_relative.$N
    mkdir -p "$MOUSE_RELATIVE_FUNCTIONS_DIR"
    echo 0 > "${MOUSE_RELATIVE_FUNCTIONS_DIR}/protocol"
    echo 0 > "${MOUSE_RELATIVE_FUNCTIONS_DIR}/subclass"
    echo 7 > "${MOUSE_RELATIVE_FUNCTIONS_DIR}/report_length"
    # Write the report descriptor
    D=$(mktemp)
    {
	echo -ne \\x05\\x01\\x09\\x02\\xA1\\x01\\x05\\x09\\x19\\x01\\x29\\x08\\x15\\x00\\x25\\x01\\x95\\x08\\x75\\x01\\x81\\x02\\x05\\x01\\x09\\x30\\x09\\x31\\x15\\x81\\x25\\x7f\\x75\\x08\\x95\\x02\\x81\\x06\\x09\\x38\\x15\\x81\\x25\\x7F\\x75\\x08\\x95\\x01\\x81\\x06\\x05\\x0C\\x0A\\x38\\x02\\x15\\x81\\x25\\x7F\\x75\\x08\\x95\\x01\\x81\\x06\\xC0
    } >> "$D"
    cp "$D" "${MOUSE_RELATIVE_FUNCTIONS_DIR}/report_desc"

    # Mouse Absolute
    MOUSE_ABSOLUTE_FUNCTIONS_DIR=functions/hid.mouse_absolute.$N
    mkdir -p "$MOUSE_ABSOLUTE_FUNCTIONS_DIR"
    echo 0 > "${MOUSE_ABSOLUTE_FUNCTIONS_DIR}/protocol"
    echo 0 > "${MOUSE_ABSOLUTE_FUNCTIONS_DIR}/subclass"
    echo 7 > "${MOUSE_ABSOLUTE_FUNCTIONS_DIR}/report_length"
    # Write the report descriptor
    D=$(mktemp)
    {
	echo -ne \\x05\\x01\\x09\\x02\\xA1\\x01\\x05\\x09\\x19\\x01\\x29\\x08\\x15\\x00\\x25\\x01\\x95\\x08\\x75\\x01\\x81\\x02\\x05\\x01\\x09\\x30\\x09\\x31\\x15\\x00\\x26\\xff\\x7f\\x75\\x10\\x95\\x02\\x81\\x02\\x09\\x38\\x15\\x81\\x25\\x7F\\x75\\x08\\x95\\x01\\x81\\x06\\x05\\x0C\\x0A\\x38\\x02\\x15\\x81\\x25\\x7F\\x75\\x08\\x95\\x01\\x81\\x06\\xC0
    } >> "$D"
    cp "$D" "${MOUSE_ABSOLUTE_FUNCTIONS_DIR}/report_desc"

    echo "Config $C: ECM network" > configs/c.$C/strings/0x409/configuration

    ln -s "$KEYBOARD_FUNCTIONS_DIR" configs/c.$C/
    ln -s "$MOUSE_RELATIVE_FUNCTIONS_DIR" configs/c.$C/
    ln -s "$MOUSE_ABSOLUTE_FUNCTIONS_DIR" configs/c.$C/
fi

#echo 0xa0 > configs/c.$C/bmAttributes
if [ "$AM_HID_ATTACKFS" == "yes" ]
then
    C=1
    mkdir -p configs/c.$C/strings/0x409

    KEYBOARD_FUNCTIONS_DIR=functions/hid.keyboard.$N
    mkdir -p "$KEYBOARD_FUNCTIONS_DIR"
    echo 1 > "${KEYBOARD_FUNCTIONS_DIR}/protocol" # Keyboard
    echo 1 > "${KEYBOARD_FUNCTIONS_DIR}/subclass" # Boot interface subclass
    echo 8 > "${KEYBOARD_FUNCTIONS_DIR}/report_length"
    # Write the report descriptor
    D=$(mktemp)

    {
	echo -ne \\x05\\x01\\x09\\x06\\xA1\\x01\\x05\\x08\\x19\\x01\\x29\\x03\\x15\\x00\\x25\\x01\\x75\\x01\\x95\\x03\\x91\\x02\\x09\\x4B\\x95\\x01\\x91\\x02\\x95\\x04\\x91\\x01\\x05\\x07\\x19\\xE0\\x29\\xE7\\x95\\x08\\x81\\x02\\x75\\x08\\x95\\x01\\x81\\x01\\x19\\x00\\x29\\x91\\x26\\xFF\\x00\\x95\\x06\\x81\\x00\\xC0
    } >> "$D"
    cp "$D" "${KEYBOARD_FUNCTIONS_DIR}/report_desc"

    # Mouse Relative
    MOUSE_RELATIVE_FUNCTIONS_DIR=functions/hid.mouse_relative.$N
    mkdir -p "$MOUSE_RELATIVE_FUNCTIONS_DIR"
    echo 0 > "${MOUSE_RELATIVE_FUNCTIONS_DIR}/protocol"
    echo 0 > "${MOUSE_RELATIVE_FUNCTIONS_DIR}/subclass"
    echo 7 > "${MOUSE_RELATIVE_FUNCTIONS_DIR}/report_length"
    # Write the report descriptor
    D=$(mktemp)
    {
	echo -ne \\x05\\x01\\x09\\x02\\xA1\\x01\\x05\\x09\\x19\\x01\\x29\\x08\\x15\\x00\\x25\\x01\\x95\\x08\\x75\\x01\\x81\\x02\\x05\\x01\\x09\\x30\\x09\\x31\\x15\\x81\\x25\\x7f\\x75\\x08\\x95\\x02\\x81\\x06\\x09\\x38\\x15\\x81\\x25\\x7F\\x75\\x08\\x95\\x01\\x81\\x06\\x05\\x0C\\x0A\\x38\\x02\\x15\\x81\\x25\\x7F\\x75\\x08\\x95\\x01\\x81\\x06\\xC0
    } >> "$D"
    cp "$D" "${MOUSE_RELATIVE_FUNCTIONS_DIR}/report_desc"

    # Mouse Absolute
    MOUSE_ABSOLUTE_FUNCTIONS_DIR=functions/hid.mouse_absolute.$N
    mkdir -p "$MOUSE_ABSOLUTE_FUNCTIONS_DIR"
    echo 0 > "${MOUSE_ABSOLUTE_FUNCTIONS_DIR}/protocol"
    echo 0 > "${MOUSE_ABSOLUTE_FUNCTIONS_DIR}/subclass"
    echo 7 > "${MOUSE_ABSOLUTE_FUNCTIONS_DIR}/report_length"
    # Write the report descriptor
    D=$(mktemp)
    {
	echo -ne \\x05\\x01\\x09\\x02\\xA1\\x01\\x05\\x09\\x19\\x01\\x29\\x08\\x15\\x00\\x25\\x01\\x95\\x08\\x75\\x01\\x81\\x02\\x05\\x01\\x09\\x30\\x09\\x31\\x15\\x00\\x26\\xff\\x7f\\x75\\x10\\x95\\x02\\x81\\x02\\x09\\x38\\x15\\x81\\x25\\x7F\\x75\\x08\\x95\\x01\\x81\\x06\\x05\\x0C\\x0A\\x38\\x02\\x15\\x81\\x25\\x7F\\x75\\x08\\x95\\x01\\x81\\x06\\xC0
    } >> "$D"
    cp "$D" "${MOUSE_ABSOLUTE_FUNCTIONS_DIR}/report_desc"

    echo "Config $C: ECM network" > configs/c.$C/strings/0x409/configuration

    ln -s "$KEYBOARD_FUNCTIONS_DIR" configs/c.$C/
    ln -s "$MOUSE_RELATIVE_FUNCTIONS_DIR" configs/c.$C/
    ln -s "$MOUSE_ABSOLUTE_FUNCTIONS_DIR" configs/c.$C/

    #C=2
    #mkdir -p configs/c.$C/strings/0x409
    mkdir -p ${FLASHDRIVE_ATTACKFS_FILE/img/d}
    mount -o loop,ro -t vfat $FLASHDRIVE_ATTACKFS_FILE ${FLASHDRIVE_ATTACKFS_FILE/img/d}
    mkdir -p functions/mass_storage.$N
    echo 1 > functions/mass_storage.$N/stall
    echo 0 > functions/mass_storage.$N/lun.0/cdrom
    echo 0 > functions/mass_storage.$N/lun.0/ro
    echo 0 > functions/mass_storage.$N/lun.0/nofua
    echo $FLASHDRIVE_ATTACKFS_FILE > functions/mass_storage.$N/lun.0/file
    ln -s functions/mass_storage.$N configs/c.$C/
    echo "test"
fi

# this lists available UDC drivers
if [[ "$AM_SERIAL" == "yes" || "$AM_ETHERNET" == "yes" || "$AM_RNDIS" == "yes" || "$AM_STORAGE" == "yes" || "$AM_HID" == "yes" || "$AM_HID_ATTACKFS" == "yes" ]]
then
    echo 250 > configs/c.$C/MaxPower
    ls /sys/class/udc > UDC
fi
#echo 250 > configs/c.$C/MaxPower
#ls /sys/class/udc > UDC
